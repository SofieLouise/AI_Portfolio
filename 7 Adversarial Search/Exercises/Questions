1. What is the branching factor at depth 0? At depth 1?
    - depth 0: n
    - depth 1: n-1

2. What is the maximal depth?
    - max depth: n

3. Will a MIN move attempt to minimize or maximize the utility?
    - minimize the utility

4. Are states after a terminal state explored?
    - Not sure what this question means.
    - The AI test several different approaches until terminated_state
    - When the best is found, it picks this.

5. Are all possible states explored to a terminal state?
    - Not sure what this question means

6. Is this a depth-first or breadth-first search? How do you know? (see Python code)
    - Depth first: The minimax algorithm explores the entire game tree using a depth-first search.
    At each node in the tree where X-player has to move, X-player would like to play the move that maximizes the payoff.
    Thus, X-player will assign the maximum score amongst the children to the node where Max makes a move.
    Similarly, O-player will minimize the payoff to X-player. The maximum and minimum scores are taken at
    alternating levels of the tree, since X and O alternate turns.

7. Run the MinMax tic-tac-toe program (you will play O)
    - Even if I win the program doesn't stop:
    -----
    X X O
    X O X
    O 7 8
    Your move?